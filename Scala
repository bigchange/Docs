1. AOP 编程实践：主要适用范围有将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。
	
	通过抽象特质Ftrait 然后里面定义一系列抽象行为动作方法
	
	将不同业务上的行为处理定义成不同特定的Ctrait继承父特质： 实现动作需要执行的逻辑（一般做一些初始化操作后，调用具体动作方法，通过super.Method调用具体动作实现方法）
	
	业务类继承父特质并且实现该义务逻辑需要特定执行的动作方法，在对应的Ctrait中super调用中执行（如何构造这个业务类才能执行实现的动作方法呢？接着看）
	
	构建具体的业务类实例并且混入需要的Ctrait（new Class with Ctrait : 重要，只有混入需要的特质才能在super.Method中调用改业务中已经实现的动作方法）这样当具体业务逻辑调用动作时正式触发动作的产生
	
	